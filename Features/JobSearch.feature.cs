// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace LabCorp.UITest.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LabCorp Job Search and Apply")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class LabCorpJobSearchAndApplyFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "Features", "LabCorp Job Search and Apply", "  As a job seeker\r\n  I want to search and apply for jobs at LabCorp\r\n  So that I " +
                "can find a suitable position for my career", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "JobSearch.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
#line 7
  await testRunner.GivenAsync("I open the browser and navigate to \"https://www.labcorp.com\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
  await testRunner.WhenAsync("I click the \"Careers\" link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search for Senior Full Stack Engineer Position")]
        public async global::System.Threading.Tasks.Task SearchForSeniorFullStackEngineerPosition()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Search for Senior Full Stack Engineer Position", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 11
  await testRunner.WhenAsync("I search for the position \"Senior Full Stack Engineer\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
  await testRunner.AndAsync("I select the job from the results", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Job Title",
                            "Senior Full Stack Engineer"});
                table1.AddRow(new string[] {
                            "Job Location",
                            "Durham, North Carolina, United States of America"});
                table1.AddRow(new string[] {
                            "Job Id",
                            "2517089"});
                table1.AddRow(new string[] {
                            "Job Category",
                            "Information Technology"});
                table1.AddRow(new string[] {
                            "Job Type",
                            "Full-Time"});
                table1.AddRow(new string[] {
                            "Job Industry",
                            "Professional Services"});
#line 13
  await testRunner.ThenAsync("I should see the job details with:", ((string)(null)), table1, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Job Description Details")]
        public async global::System.Threading.Tasks.Task VerifyJobDescriptionDetails()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify Job Description Details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 22
  await testRunner.WhenAsync("I search for the position \"Senior Full Stack Engineer\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
  await testRunner.AndAsync("I select the job from the results", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Duties & Responsibilities",
                            "Develop through modern Agile development methodologies intuitive, easy-to-use sof" +
                                "tware in collaboration with the development team, project managers, business ana" +
                                "lysts, UX designers, quality assurance and users across the organization."});
                table2.AddRow(new string[] {
                            "Minimum Requirement",
                            "Bachelor\'s degree in computer science or equivalent technical work experience."});
                table2.AddRow(new string[] {
                            "Preferred Requirement",
                            "2+ years work experience and expert knowledge of primary AWS services (Lambda, EC" +
                                "S, IAM, VPC, EC2, ELB, RDS, Route53, S3, API gateway, SQS, DynamoDB)."});
                table2.AddRow(new string[] {
                            "Application Window",
                            "Application Window closes 8/10/2025"});
                table2.AddRow(new string[] {
                            "Benefits",
                            @"Employees regularly scheduled to work 20 or more hours per week are eligible for comprehensive benefits including: Medical, Dental, Vision, Life, STD/LTD, 401(k), Paid Time Off (PTO) or Flexible Time Off (FTO), Tuition Reimbursement and Employee Stock Purchase Plan."});
                table2.AddRow(new string[] {
                            "Equal Opportunity",
                            "Labcorp is proud to be an Equal Opportunity Employer: Labcorp strives for inclusi" +
                                "on and belonging in the workforce and does not tolerate harassment or discrimina" +
                                "tion of any kind."});
#line 24
  await testRunner.ThenAsync("the job description should contain:", ((string)(null)), table2, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Apply for Position and Return to Search")]
        public async global::System.Threading.Tasks.Task ApplyForPositionAndReturnToSearch()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Apply for Position and Return to Search", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 33
  await testRunner.WhenAsync("I search for the position \"Senior Full Stack Engineer\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
  await testRunner.AndAsync("I select the job from the results", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
  await testRunner.AndAsync("I click \"Apply Now\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Job Title",
                            "Senior Full Stack Engineer"});
                table3.AddRow(new string[] {
                            "Job Location",
                            "Durham, North Carolina, United States of America"});
                table3.AddRow(new string[] {
                            "Job Id",
                            "2517089"});
                table3.AddRow(new string[] {
                            "Job Type",
                            "Full-Time"});
#line 36
  await testRunner.ThenAsync("the application page should show:", ((string)(null)), table3, "Then ");
#line hidden
#line 41
  await testRunner.WhenAsync("I click \"Return to Job Search\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
  await testRunner.ThenAsync("I should be back on the job search results page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
